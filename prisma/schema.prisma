// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?
  role          UserRole @default(USER)
  language      String   @default("en")
  companyId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  company       Company? @relation(fields: [companyId], references: [id])
  alerts        Alert[]
  sessions      Session[]
  
  @@map("users")
}

model Company {
  id            String   @id @default(cuid())
  name          String
  domain        String?
  subscription  SubscriptionTier @default(BASIC)
  settings      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  users         User[]
  integrations  Integration[]
  threats       Threat[]
  reports       Report[]
  
  @@map("companies")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Integration Management
model Integration {
  id           String           @id @default(cuid())
  companyId    String
  type         IntegrationType
  name         String
  config       Json
  status       IntegrationStatus @default(ACTIVE)
  lastSyncAt   DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  company      Company          @relation(fields: [companyId], references: [id])
  communications Communication[]
  
  @@map("integrations")
}

// Communication Data
model Communication {
  id           String           @id @default(cuid())
  integrationId String
  type         CommunicationType
  sourceId     String
  content      String
  metadata     Json?
  language     String           @default("en")
  analyzedAt   DateTime?
  createdAt    DateTime         @default(now())
  
  integration  Integration      @relation(fields: [integrationId], references: [id])
  threats      Threat[]
  
  @@map("communications")
}

// Threat Detection
model Threat {
  id           String         @id @default(cuid())
  companyId    String
  communicationId String?
  type         ThreatType
  severity     ThreatSeverity
  title        String
  description  String
  confidence   Float          @default(0.0)
  metadata     Json?
  status       ThreatStatus   @default(OPEN)
  assignedTo   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  company      Company        @relation(fields: [companyId], references: [id])
  communication Communication? @relation(fields: [communicationId], references: [id])
  alerts       Alert[]
  recommendations Recommendation[]
  
  @@map("threats")
}

// Recommendations
model Recommendation {
  id           String   @id @default(cuid())
  threatId     String
  type         RecommendationType
  title        String
  description  String
  steps        Json
  priority     Priority
  status       RecommendationStatus @default(PENDING)
  language     String   @default("en")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  threat       Threat   @relation(fields: [threatId], references: [id])
  
  @@map("recommendations")
}

// Alerting System
model Alert {
  id           String     @id @default(cuid())
  userId       String
  threatId     String
  type         AlertType
  title        String
  message      String
  status       AlertStatus @default(UNREAD)
  metadata     Json?
  createdAt    DateTime   @default(now())
  readAt       DateTime?
  
  user         User       @relation(fields: [userId], references: [id])
  threat       Threat     @relation(fields: [threatId], references: [id])
  
  @@map("alerts")
}

// Reporting
model Report {
  id           String     @id @default(cuid())
  companyId    String
  type         ReportType
  title        String
  description  String?
  data         Json
  format       ReportFormat @default(JSON)
  status       ReportStatus @default(GENERATING)
  createdAt    DateTime   @default(now())
  completedAt  DateTime?
  
  company      Company    @relation(fields: [companyId], references: [id])
  
  @@map("reports")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SECURITY_OFFICER
  HR_MANAGER
  COMPLIANCE_OFFICER
  IT_SECURITY
}

enum SubscriptionTier {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum IntegrationType {
  EMAIL_GMAIL
  EMAIL_OUTLOOK
  EMAIL_EXCHANGE
  CHAT_SLACK
  CHAT_TEAMS
  CHAT_WHATSAPP
  CUSTOM
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum CommunicationType {
  EMAIL
  CHAT_DIRECT
  CHAT_GROUP
  CHAT_CHANNEL
}

enum ThreatType {
  FRAUD
  HARASSMENT
  BULLYING
  BURNOUT
  INFORMATION_LEAKAGE
  DISSATISFACTION
}

enum ThreatSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ThreatStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  FALSE_POSITIVE
}

enum RecommendationType {
  POLICY_UPDATE
  TRAINING
  INVESTIGATION
  SYSTEM_CONFIG
  COMMUNICATION_GUIDELINE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RecommendationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DISMISSED
}

enum AlertType {
  THREAT_DETECTED
  SEVERITY_CHANGE
  RECOMMENDATION_AVAILABLE
  SYSTEM_ALERT
}

enum AlertStatus {
  UNREAD
  READ
  ARCHIVED
}

enum ReportType {
  THREAT_SUMMARY
  COMPLIANCE_REPORT
  USER_ACTIVITY
  INTEGRATION_HEALTH
}

enum ReportFormat {
  JSON
  PDF
  CSV
  HTML
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}